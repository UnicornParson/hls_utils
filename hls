#!/usr/bin/env python3

import enum
import traceback
import configparser
import os
import sys
import argparse
import m3u8
import asyncio
import logging
from urllib.parse import urlparse
from hls_internal import *
from common import *

if has_pkg("tracemalloc"):
	import tracemalloc

from hls_internal.HLSDownloader import *
from hls_internal.OutputBuilder import *
import json
import urllib3

class Chain():
	def __init__(self) -> None:
		pass
	async def setup(self, args):
		return True
	async def close(self, args):
		return True
	async def exec(self, args):
		raise NotImplementedError
	def chainName(self) -> str:
		return "BaseChain"


class ScanChain(Chain):
	def chainName(self) -> str:
		return "ScanChain"
	async def exec(self, args):
		parser = ListParser.Parser()
		content = await parser.load(args.url)
		if not content.ok:
			eprint("cannot load %s reason %s" % (args.url, content.reason))
		objprint("parser content", content.items)
		return content.ok
	
class LoopRunner():
	def __init__(self, chain: Chain) -> None:
		self.chain = chain

	async def run(self, args):
		rc = await self.chain.setup(args)
		if not rc:
			eprint("cannot setup %s. args [%s]" %(self.chain.chainName(), str(args)))
			return False

		if args.single:
			rc = await self.single(args)
		else:
			rc = await self.loop(args)
		await self.chain.close(args)
		return rc

	async def single(self, args):
		rc = await self.chain.exec(args)

		return rc
	
	async def loop(self, args):
		rc = []
		try:
			while True:
				rc.append (await self.single(args))
				await asyncio.sleep(1)
		except KeyboardInterrupt:
			eprint("Interrupted..")
		except Exception as e:
			eprint("error: " + str(e))
		return rc


class Actions(enum.Enum):
	invalid = -1
	download = 0
	scan = 1
	stat = 2
	available = 3
	media = 4

	@staticmethod
	def parse(value) -> enum.Enum:
		if value == None:
			return Actions.invalid
		for m, mm in Actions.__members__.items():
			if m == value.lower():
				return mm
		return Actions.invalid
	
	@staticmethod
	def values() -> list:
		return [e.value for e in Actions]
	
	@staticmethod
	def str_values() -> list:
		return [e.name for e in Actions]

class DownloaderChain(Chain):
	def __init__(self) -> None:
		super().__init__()
		self.d = HLSDownloader.Downloader()
		self.mapper = HLSDownloader.PlaylistMapping()

	async def setup(self, args):
		self.d.saveMeta = args.savemeta
		return True
	async def exec(self, args):
		rc = await self.d.downloadPlaylist(args.url, self.mapper)
		return rc
async def downloadCmd(args) -> bool:
	chain = DownloaderChain()
	runner = LoopRunner(chain)
	return await runner.run(args)

class StatChain(Chain):
	def __init__(self) -> None:
		super().__init__()
		self.s = None
		self.writer = None
		self.follow = True

	async def setup(self, args):
		self.follow = not args.nofollow
		self.s = StatCollector.StatCollector(self.follow)

		printer = None
		if Globals.flow:
			printer = StatCollector.NopPrinter()
			self.writer = StatCollector.NopWriter()
		else:
			if args.verbose:
				printer = StatCollector.StatVerbosePrinter()
			else:
				printer = StatCollector.StatPrinter()
			self.writer = DbWriter.NopWriter()

		rc = await self.writer.setup()
		if not rc:
			eprint("cannot setup writer")
			return rc
		rc = self.s.setup([self.writer, printer])
		if not rc:
			await self.writer.close()
			eprint("cannot setup collector")
		return rc
		
	async def exec(self, args):
		rc = await self.s.processUrl(args.url, True)
		return rc
	
	async def close(self, args):
		if self.writer:
			await self.writer.close()
		return True


async def statCmd(args) -> bool:
	chain = StatChain()
	runner = LoopRunner(chain)
	return await runner.run(args)

async def scanCmd(args) -> bool:
	chain = ScanChain()
	runner = LoopRunner(chain)
	return await runner.run(args)

async def extractMedia(args):
	url = args.url
	try:
		playlist = m3u8.load(url, timeout=3.0)
	except Exception as e:
		return []
	if not playlist.is_variant:
		return [url]
	urls = []
	for sub in playlist.playlists:
		newuri = sub.uri
		if not isAbsoluteUrl(sub.uri):
			base = urlBase(url)
			newuri = base + sub.uri
		sub.uri = newuri
		urls.append(newuri)
	return urls

async def availableCmd(args) -> bool:
	playlistUrl = args.url #"https://iptv-org.github.io/iptv/index.nsfw.m3u"
	p = ListParser.Parser()
	s = ListScanner.ListScanner()

	await s.loadUrl(playlistUrl)
	l = await s.scan()
	objprint("availableCmd scan rc", l)

async def main() -> int:
	parser = argparse.ArgumentParser(add_help=True, description="HLS tool")
	parser.add_argument("-o", "--out",     action="store", default=".", help="download folder") 
	parser.add_argument("-1", "--single",  action="store_true", help="single run. test and exit")
	parser.add_argument("-v", "--verbose", action="store_true", help="full console output")
	parser.add_argument("--config", action="store", help="config file")
	parser.add_argument("--flow", action="store_true", help="flow mode. json output only")
	parser.add_argument("--nofollow", action="store_true", help="process only top playlist")
	parser.add_argument("--delay", action="store_true", help="random sleep before start")
	parser.add_argument("--savemeta", action="store_true", help="save metainfo (playlists, text files, etc...)")
	parser.add_argument("-z", "--zip", action="store_true", help="compress meta files")

	parser.add_argument("cmd", help="what do we do. variants: %s " % str(Actions.str_values()))
	parser.add_argument("url", help="stream url")

	args = parser.parse_args()
	cmd = Actions.parse(args.cmd)
	if cmd == Actions.invalid:
		eprint("invalid cmd")
		parser.print_help()
		return -1
	Globals.verbose = bool(args.verbose) and not bool(args.flow)
	Globals.flow = bool(args.flow) or cmd == Actions.media
	Globals.flowResults["ok"] = False
	Globals.zipdata = bool(args.zip)

	if args.delay:
		randomSleep(0.2, 3.5)



	rc = False
	if cmd == Actions.download:
		rc = await downloadCmd(args)
	elif cmd == Actions.stat:
		rc = await statCmd(args)
	elif cmd == Actions.scan:
		rc = await scanCmd(args)
	elif cmd == Actions.available:
		rc = await availableCmd(args)
	elif cmd == Actions.media:
		rc = await extractMedia(args)
		print(json.dumps(rc, default=default_serialize))
		return 0

	mprint("rc: %s" % str(rc))
	Globals.flowResults["ok"] = rc

	if rc or Globals.flow:
		print(json.dumps(Globals.flowResults, default=default_serialize))
		return 0
	return -1

if __name__ == '__main__':
	result = 0
	try:
		logging.basicConfig(filename='hls.%d.log' % (mstime()), encoding='utf-8', level=logging.DEBUG)
	except ValueError:
		logging.basicConfig(filename='hls.%d.log' % (mstime()), level=logging.DEBUG)
	urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
	if has_pkg("tracemalloc"):
		tracemalloc.start()
	try:
		result = asyncio.run(main())
	except KeyboardInterrupt:
		print(" KeyboardInterrupt...")
	logging.shutdown()
	exit(result)